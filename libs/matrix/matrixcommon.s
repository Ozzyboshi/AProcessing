LOAD_CURRENT_TRANSFORMATION_MATRIX MACRO
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
    LOAD (b0)+,\1
    LOAD (b0)+,\2
    LOAD (b0),\3
	ELSE
	move.l CURRENT_TRANSFORMATION_MATRIX,\1
	move.l CURRENT_TRANSFORMATION_MATRIX+4,\1+4
	move.l CURRENT_TRANSFORMATION_MATRIX+8,\1+8
	move.l CURRENT_TRANSFORMATION_MATRIX+12,\1+12
	move.l CURRENT_TRANSFORMATION_MATRIX+16,\1+16
	move.l CURRENT_TRANSFORMATION_MATRIX+20,\1+20
	ENDC
	ENDM

LOAD_CURRENT_TRANSFORMATION_MATRIX_PC MACRO
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
    LOAD (b0)+,\1
    LOAD (b0)+,\2
    LOAD (b0),\3
	ELSE
	move.l CURRENT_TRANSFORMATION_MATRIX(PC),\1
	move.l 4+CURRENT_TRANSFORMATION_MATRIX,4+\1
	move.l 8+CURRENT_TRANSFORMATION_MATRIX,8+\1
	move.l 12+CURRENT_TRANSFORMATION_MATRIX,12+\1
	move.l 16+CURRENT_TRANSFORMATION_MATRIX,16+\1
	move.l 20+CURRENT_TRANSFORMATION_MATRIX,20+\1
	ENDC
	ENDM

LOAD_CURRENT_TRANSFORMATION_MATRIX_AX MACRO
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
    LOAD (b0)+,\1
    LOAD (b0)+,\2
    LOAD (b0),\3
	ELSE
	move.l CURRENT_TRANSFORMATION_MATRIX(PC),(\1)+
	move.l 4+CURRENT_TRANSFORMATION_MATRIX(PC),(\1)+
	move.l 8+CURRENT_TRANSFORMATION_MATRIX(PC),(\1)+
	move.l 12+CURRENT_TRANSFORMATION_MATRIX(PC),(\1)+
	move.l 16+CURRENT_TRANSFORMATION_MATRIX(PC),(\1)+
	move.l 20+CURRENT_TRANSFORMATION_MATRIX(PC),(\1)
	ENDC
	ENDM

LOADIDENTITYANDTRANSLATE:
	movem.l d0-d2/a0,-(sp) ; stack save
	asl.w                       #6,d0
	asl.w                       #6,d1
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
	REG_LOADI 0000,0040,0000,0000,e0
    store e0,(b0)+
	REG_LOADI 0000,0000,0040,0000,e0
    store e0,(b0)+
	swap d0
	move.w d1,d0
	move.l #$00000040,d2
	vperm #$45CDEF67,d2,d0,e0
    store e0,(b0)+
	ELSE
	lea    CURRENT_TRANSFORMATION_MATRIX(PC),a0
	moveq  #0,d2
	move.l #$00000040,(a0)+
	move.l d2,(a0)+
	move.l d2,(a0)+
	move.l #$00400000,(a0)+
	move.w d2,(a0)+

	move.w d0,(a0)+
	move.w d1,(a0)+
	move.w #$0040,(a0)
	ENDC
	movem.l (sp)+,d0-d2/a0
	rts

	IFD USE_3D
LOADIDENTITYANDROTATEY:
	movem.l d0-d2/a0-a1,-(sp) ; stack save
	moveq #5,d2
	lea ROT_Z_MATRIX_Q5_11,a0
	IFD VAMPIRE
	LOAD (a0,D0.w*8),E10 ; Load precalculated sin/cos values to register E10
	ELSE
	lsl.w #3,d0
	add.w d0,a0
	ENDC
	moveq #0,d1

	lea CURRENT_TRANSFORMATION_MATRIX(PC),a1

	move.w d1,(a1)+
	IFD VAMPIRE
	vperm #$01010101,e10,e10,d0
	ELSE
	move.w (a0)+,d0
	ENDC
	asr.w d2,d0
	move.w d0,(a1)+
	move.w d1,(a1)+
	IFD VAMPIRE
	vperm #$45454545,e10,e10,d0
	ELSE
	move.w 2(a0),d0
	ENDC
	asr.w d2,d0
	move.w d0,(a1)+

	move.l d1,(a1)+
	move.l #$00400000,(a1)+
	
	move.w d1,(a1)+
	IFD VAMPIRE
	vperm #$23232323,e10,e10,d0
	ELSE
	move.w (a0)+,d0
	ENDC
	asr.w d2,d0
	move.w d0,(a1)+
	move.w d1,(a1)+
	IFD VAMPIRE
	vperm #$67676767,e10,e10,d0
	ELSE
	move.w 2(a0),d0
	ENDC
	asr.w d2,d0
	move.w d0,(a1)
	movem.l (sp)+,d0-d2/a0-a1
	rts

LOADIDENTITYANDROTATEX:
	movem.l d0-d2/a0-a1,-(sp) ; stack save

	lea ROT_Z_MATRIX_Q5_11,a0
	IFD VAMPIRE
	LOAD (a0,D0.w*8),E10 ; Load precalculated sin/cos values to register E10
	ELSE
	lsl.w #3,d0
	add.w d0,a0
	ENDC
	moveq #0,d1

	lea CURRENT_TRANSFORMATION_MATRIX(PC),a1

	move.w d1,(a1)+
	move.w #$0040,(a1)+
	move.l d1,(a1)+

	move.l d1,(a1)+
	IFD VAMPIRE
	vperm #$01010101,e10,e10,d0
	ELSE
	move.w (a0)+,d0
	ENDC
	asr.w #5,d0
	move.w d0,(a1)+
	IFD VAMPIRE
	vperm #$23232323,e10,e10,d0
	ELSE
	move.w (a0)+,d0
	ENDC
	asr.w #5,d0
	move.w d0,(a1)+

	move.l d1,(a1)+
	IFD VAMPIRE
	vperm #$45454545,e10,e10,d0
	ELSE
	move.w (a0)+,d0
	ENDC
	asr.w #5,d0
	move.w d0,(a1)+
	IFD VAMPIRE
	vperm #$67676767,e10,e10,d0
	ELSE
	move.w (a0)+,d0
	ENDC
	asr.w #5,d0
	move.w d0,(a1)

	movem.l (sp)+,d0-d2/a0-a1
	rts
	ENDC

MATRIX_STACK_START:
	IFD MATRIX_STACK_SIZE
	dcb.b MATRIX_STACK_SIZE*256,$00
	ELSE
	dcb.b 24*256,$00
	ENDC
MATRIX_STACK_END:

MATRIX_STACK_PTR: dc.l MATRIX_STACK_START

CURRENT_TRANSFORMATION_MATRIX:
    dc.w 0000,$0040,0000,0000
    dc.w 0000,0000,$0040,0000
    dc.w 0000,0000,0000,$0040

OPERATOR1_TRANSFORMATION_MATRIX:
OPERATOR1_TR_MATRIX_ROW1:
OPERATOR1_TR_MATRIX_ROW1_WORD0:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW1_WORD1:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW1_WORD2:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW1_WORD3:
	dc.w 0

OPERATOR1_TR_MATRIX_ROW2:
OPERATOR1_TR_MATRIX_ROW2_WORD0:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW2_WORD1:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW2_WORD2:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW2_WORD3:
	dc.w 0

OPERATOR1_TR_MATRIX_ROW3:
OPERATOR1_TR_MATRIX_ROW3_WORD0:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW3_WORD1:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW3_WORD2:
	dc.w 0
OPERATOR1_TR_MATRIX_ROW3_WORD3:
	dc.w 0

OPERATOR2_TRANSFORMATION_MATRIX:
OPERATOR2_TR_MATRIX_ROW1:
OPERATOR2_TR_MATRIX_ROW1_WORD0:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW1_WORD1:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW1_WORD2:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW1_WORD3:
	dc.w 0

OPERATOR2_TR_MATRIX_ROW2:
OPERATOR2_TR_MATRIX_ROW2_WORD0:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW2_WORD1:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW2_WORD2:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW2_WORD3:
	dc.w 0

OPERATOR2_TR_MATRIX_ROW3:
OPERATOR2_TR_MATRIX_ROW3_WORD0:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW3_WORD1:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW3_WORD2:
	dc.w 0
OPERATOR2_TR_MATRIX_ROW3_WORD3:
	dc.w 0

OPERATOR3_TRANSFORMATION_MATRIX:
OPERATOR3_TR_MATRIX_ROW1:
OPERATOR3_TR_MATRIX_ROW1_WORD0:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW1_WORD1:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW1_WORD2:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW1_WORD3:
	dc.w 0

OPERATOR3_TR_MATRIX_ROW2:
OPERATOR3_TR_MATRIX_ROW2_WORD0:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW2_WORD1:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW2_WORD2:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW2_WORD3:
	dc.w 0

OPERATOR3_TR_MATRIX_ROW3:
OPERATOR3_TR_MATRIX_ROW3_WORD0:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW3_WORD1:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW3_WORD2:
	dc.w 0
OPERATOR3_TR_MATRIX_ROW3_WORD3:
	dc.w 0
