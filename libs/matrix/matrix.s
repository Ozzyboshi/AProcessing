

MATRIX_STACK_START:
	dcb.b 24*256,$00
MATRIX_STACK_END:

MATRIX_STACK_PTR: dc.l MATRIX_STACK_START

CURRENT_TRANSFORMATION_MATRIX:
    dc.w 0000,$0040,0000,0000
    dc.w 0000,0000,$0040,0000
    dc.w 0000,0000,0000,$0040

;TRANSFORMATIONS_PTR:
;    dc.l TRANSFORMATIONS_MATRIX

AMMX_DUMP_TRANFORMATION_MATRIX_TO_RAM MACRO
	lea OPERATOR1_TRANSFORMATION_MATRIX_ROW1,b0
	store \1,(b0)+
	store \2,(b0)+
	store \3,(b0)+
	ENDM

RESET_MATRIX_STACK MACRO
	; reset matrix stack
	move.l #MATRIX_STACK_START,MATRIX_STACK_PTR
	ENDM

RESET_CURRENT_TRANFORMATION_MATRIX_Q_10_6 MACRO
	RESET_MATRIX_STACK
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
	REG_LOADI 0000,0040,0000,0000,e0
    store e0,(b0)+
	REG_LOADI 0000,0000,0040,0000,e0
    store e0,(b0)+
	REG_LOADI 0000,0000,0000,0040,e0
    store e0,(b0)+
	ENDIF
	IFND VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,a0
	move.l #$00000040,(a0)+
	move.l #$00000000,(a0)+
	move.l #$00000000,(a0)+
	move.l #$00400000,(a0)+
	move.l #$00000000,(a0)+
	move.l #$00000040,(a0)+
	ENDIF
	ENDM

OPERATOR1_TRANSFORMATION_MATRIX:
OPERATOR1_TRANSFORMATION_MATRIX_ROW1:
OPERATOR1_TRANSFORMATION_MATRIX_ROW1_WORD0:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW1_WORD1:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW1_WORD2:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW1_WORD3:
	dc.w 0

OPERATOR1_TRANSFORMATION_MATRIX_ROW2:
OPERATOR1_TRANSFORMATION_MATRIX_ROW2_WORD0:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW2_WORD1:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW2_WORD2:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW2_WORD3:
	dc.w 0

OPERATOR1_TRANSFORMATION_MATRIX_ROW3:
OPERATOR1_TRANSFORMATION_MATRIX_ROW3_WORD0:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW3_WORD1:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW3_WORD2:
	dc.w 0
OPERATOR1_TRANSFORMATION_MATRIX_ROW3_WORD3:
	dc.w 0

OPERATOR2_TRANSFORMATION_MATRIX:
OPERATOR2_TRANSFORMATION_MATRIX_ROW1:
OPERATOR2_TRANSFORMATION_MATRIX_ROW1_WORD0:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW1_WORD1:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW1_WORD2:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW1_WORD3:
	dc.w 0

OPERATOR2_TRANSFORMATION_MATRIX_ROW2:
OPERATOR2_TRANSFORMATION_MATRIX_ROW2_WORD0:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW2_WORD1:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW2_WORD2:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW2_WORD3:
	dc.w 0

OPERATOR2_TRANSFORMATION_MATRIX_ROW3:
OPERATOR2_TRANSFORMATION_MATRIX_ROW3_WORD0:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW3_WORD1:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW3_WORD2:
	dc.w 0
OPERATOR2_TRANSFORMATION_MATRIX_ROW3_WORD3:
	dc.w 0

LOAD_CURRENT_TRANSFORMATION_MATRIX MACRO
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
    LOAD (b0)+,\1
    LOAD (b0)+,\2
    LOAD (b0),\3
	ENDIF
	IFND VAMPIRE
	move.l CURRENT_TRANSFORMATION_MATRIX,\1
	move.l CURRENT_TRANSFORMATION_MATRIX+4,\1+4
	move.l CURRENT_TRANSFORMATION_MATRIX+8,\1+8
	move.l CURRENT_TRANSFORMATION_MATRIX+12,\1+12
	move.l CURRENT_TRANSFORMATION_MATRIX+16,\1+16
	move.l CURRENT_TRANSFORMATION_MATRIX+20,\1+20
	ENDIF
	ENDM

UPDATE_CURRENT_TRANSFORMATION_MATRIX MACRO
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
    store \1,(b0)+
	store \2,(b0)+
	store \3,(b0)+
	ENDIF
	IFND VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,a0
	move.l \1,(a0)+
	move.l \1+4,(a0)+

	move.l \2,(a0)+
	move.l \2+4,(a0)+

	move.l \3,(a0)+
	move.l \3+4,(a0)+

	ENDIF
	ENDM

; Saves current transformation matrix into the MATRIX STACK
PUSHMATRIX MACRO
	movea.l MATRIX_STACK_PTR,a2
	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
	load (b0)+,e0
	store e0,(a2)+
	load (b0)+,e0
	store e0,(a2)+
	load (b0)+,e0
	store e0,(a2)+
	ENDIF
	IFND VAMPIRE
	move.l CURRENT_TRANSFORMATION_MATRIX,(a2)+
	move.l CURRENT_TRANSFORMATION_MATRIX+4,(a2)+
	move.l CURRENT_TRANSFORMATION_MATRIX+8,(a2)+
	move.l CURRENT_TRANSFORMATION_MATRIX+12,(a2)+
	move.l CURRENT_TRANSFORMATION_MATRIX+16,(a2)+
	move.l CURRENT_TRANSFORMATION_MATRIX+20,(a2)+
	ENDIF
	move.l a2,MATRIX_STACK_PTR
	ENDM

; restore matrix stack transformation matrix into transformation matrix
POPMATRIX MACRO
	movea.l MATRIX_STACK_PTR,a2
	suba.l #24,a2
	move.l a2,MATRIX_STACK_PTR

	IFD VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,b0
	load (a2)+,e0
	store e0,(b0)+
	load (a2)+,e0
	store e0,(b0)+
	load (a2),e0
	store e0,(b0)
	ENDIF

	IFND VAMPIRE
	lea CURRENT_TRANSFORMATION_MATRIX,a0
	move.l (a2)+,(a0)+
	move.l (a2)+,(a0)+

	move.l (a2)+,(a0)+
	move.l (a2)+,(a0)+

	move.l (a2)+,(a0)+
	move.l (a2)+,(a0)+
	ENDIF
	ENDM


processing_first_matrix_addr:
	move.l #OPERATOR1_TRANSFORMATION_MATRIX,d0
	rts

processing_second_matrix_addr:
	move.l #OPERATOR2_TRANSFORMATION_MATRIX,d0
	rts

processing_current_transformation_matrix_addr:
	move.l #CURRENT_TRANSFORMATION_MATRIX,d0
	rts
    