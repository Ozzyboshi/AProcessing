AMMXFILLTABLE_CURRENT_ROW:
	dc.w 0

ammx_fill_table:
	movem.l d0-d7/a0-a1,-(sp) ; stack save
	move.w #0,AMMXFILLTABLE_CURRENT_ROW

	lea FILL_TABLE,a0
ammx_fill_table_nextline:
	move.w (a0),d6 ; start of fill line
	move.w #$FFFF,(a0)+
	move.w (a0),d7 ; end of fill line
	move.w #$FFFF,(a0)+

	; end when leftx OR rightX are equal to -1 (to be modified)
	cmpi.w #$FFFF,d6
	beq.s ammx_fill_table_end
	cmpi.w #$FFFF,d7
	beq.s ammx_fill_table_end
	
	bsr.w ammx_fill_table_single_line
	add.w #1,AMMXFILLTABLE_CURRENT_ROW
	
	bra.w ammx_fill_table_nextline
ammx_fill_table_end:
	movem.l (sp)+,d0-d7/a0-a1
	rts

ammx_fill_table_single_line:
	movem.l d0-d7/a0-a1,-(sp) ; stack save

	

	; d5 => totalcount
	; d3 / d4 => tmp

	; d6 => left X
	; d7 => right X

	;lea FILL_TABLE,a0
	;move.w (a0)+,d6 ; start of fill line
	;move.w (a0)+,d7 ; end of fill line

	move.w d7,d5 ; alternative to psubw
	sub.w d6,d5
	addq #1,d5

	; debug da cancellare
	;move.l par1,a3
	;move.w d5,(a3)+

	;psubw d7,d6,d5 ; d2 is now how many pixel we must fill

	; phaze 1 => align to nearest byte
	; address of the first point
	move.w d6,d0
	move.w AMMXFILLTABLE_CURRENT_ROW,d1
	lea PLOTREFS,a1

	add.w d1,d1
	move.w 0(a1,d1.w),d1
	move.w d0,d2
	lsr.w #3,d2
	add.w d2,d1
	;not.b d0
	lea SCREEN_0,a0
	;bset d0,(a0,d1.w) 
	
	; d1.w now has the address of the first byte let's calculate the fill for this byte
	move.w d6,d4
	andi.w #$0007,d4
	move.b #$FF,d3
	lsl.b d4,d3 
	lsr.b d4,d3

	add.l d1,a0
	;or.b d3,(a0)+
	;or.b d3,(a0,d1.w)

	; ALESSIO START MODIFICA (OR Ã¨ STATO SPOSTATO SOTTO)
	;or.b d3,(a0,d1.w)

	; bitprocessed = 8-d4
	subi.b #8,d4 ; d4 must always be negative here!!!!
	add.b d4,d5 ; totalcount must be decremented by written bits (susing add because d4 is always negative)
	
	; special case -  if d5 is negative we plotted too much
	;cmpi.w #0,d5
	;bls.s ammx_fill_table_no_special_case
	bpl.s ammx_fill_table_no_special_case
    subq #1,d5
	not d5
	lsr.b d5,d3
	lsl.b d5,d3
	or.b d3,(a0)+ ; Plot points!!
	movem.l (sp)+,d0-d7/a0-a1
	rts

ammx_fill_table_no_special_case:
    ; end special case
    
    or.b d3,(a0)+ ; Plot points!!
    ; ALESSIO END MODIFICA


	; bitprocessed = 8-d4 ma che ci stai a fare??? da cancellare
	;move.w d4,(a3)+
	;subi.b #8,d4 ; d4 must always be negative here!!!!
	;move.w d4,(a3)+
	;add.b d4,d5 ; totalcount must be decremented by written bits (susing add because d4 is always negative)
	;move.w d5,(a3)+

; start iteration until we are at the end
ammx_fill_table_startiter:

	; now we are byte aligned, evaluate how many bits we still have to fill
	cmpi.w #64,d5
	bcs.w ammx_fill_table_no64 ; branch if lower (it will continue if we have at least 64 bits to fill)
	; here starts the code to fill 64 bits
	IFD VAMPIRE    
	load #$FFFFFFFFFFFFFFFF,e0
	store e0,(a0)+
	ENDIF
	IFND VAMPIRE	
	move.l  #$FFFFFFFF,(a0)+
	move.l  #$FFFFFFFF,(a0)+
	ENDIF
	
	subi.w #64,d5
	bra.w ammx_fill_table_check_if_other
ammx_fill_table_no64:

	cmpi.w #32,d5
	bcs.w ammx_fill_table_no32 ; branch if lower (it will continue if we have at least 32 bits to fill)
	move.l  #$FFFFFFFF,(a0)+
	subi.w #32,d5
	bra.w ammx_fill_table_check_if_other
ammx_fill_table_no32:

	cmpi.w #16,d5
	bcs.w ammx_fill_table_no16 ; branch if lower (it will continue if we have at least 16 bits to fill)
	move.w  #$FFFF,(a0)+
	subi.w #16,d5
	bra.w ammx_fill_table_check_if_other
ammx_fill_table_no16:

	cmpi.w #8,d5
	bcs.w ammx_fill_table_no8 ; branch if lower (it will continue if we have at least 8 bits to fill)
	move.b  #$FF,(a0)+
	subi.w #8,d5
	bra.w ammx_fill_table_check_if_other
ammx_fill_table_no8:

	; we get here only and only if there is less then a byte to fill, in other words, d5<8
	; in this case we must fill the MSG bytes of the byte wit a 1
	move.b #$FF,d3
	moveq #8,d4
	sub.w d5,d4
	lsl.b d4,d3
	or.b d3,(a0)
	moveq #0,d5





	; if we still have bit to fill repeat the process
ammx_fill_table_check_if_other;
	cmpi.w #0,d5
	bhi.w ammx_fill_table_startiter


	movem.l (sp)+,d0-d7/a0-a1
	rts


SCREEN_0
    dcb.b 40*256,$00

SCREEN_1
    dcb.b 40*256,$00

FILL_TABLE:
        dcb.b 4*256,$FF


PLOTREFS:	
	dc.w $0,$28,$50,$78,$a0
	dc.w $c8,$f0,$118,$140
	dc.w $168,$190,$1b8,$1e0
	dc.w $208,$230,$258,$280
	dc.w $2a8,$2d0,$2f8,$320
	dc.w $348,$370,$398,$3c0
	dc.w $3e8,$410,$438,$460
	dc.w $488,$4b0,$4d8,$500
	dc.w $528,$550,$578,$5a0
	dc.w $5c8,$5f0,$618,$640
	dc.w $668,$690,$6b8,$6e0
	dc.w $708,$730,$758,$780
	dc.w $7a8,$7d0,$7f8,$820
	dc.w $848,$870,$898,$8c0
	dc.w $8e8,$910,$938,$960
	dc.w $988,$9b0,$9d8,$a00
	dc.w $a28,$a50,$a78,$aa0
	dc.w $ac8,$af0,$b18,$b40
	dc.w $b68,$b90,$bb8,$be0
	dc.w $c08,$c30,$c58,$c80
	dc.w $ca8,$cd0,$cf8,$d20
	dc.w $d48,$d70,$d98,$dc0
	dc.w $de8,$e10,$e38,$e60
	dc.w $e88,$eb0,$ed8,$f00
	dc.w $f28,$f50,$f78,$fa0
	dc.w $fc8,$ff0,$1018,$1040
	dc.w $1068,$1090,$10b8,$10e0
	dc.w $1108,$1130,$1158,$1180
	dc.w $11a8,$11d0,$11f8,$1220
	dc.w $1248,$1270,$1298,$12c0
	dc.w $12e8,$1310,$1338,$1360
	dc.w $1388,$13b0,$13d8,$1400
	dc.w $1428,$1450,$1478,$14a0
	dc.w $14c8,$14f0,$1518,$1540
	dc.w $1568,$1590,$15b8,$15e0
	dc.w $1608,$1630,$1658,$1680
	dc.w $16a8,$16d0,$16f8,$1720
	dc.w $1748,$1770,$1798,$17c0
	dc.w $17e8,$1810,$1838,$1860
	dc.w $1888,$18b0,$18d8,$1900
	dc.w $1928,$1950,$1978,$19a0
	dc.w $19c8,$19f0,$1a18,$1a40
	dc.w $1a68,$1a90,$1ab8,$1ae0
	dc.w $1b08,$1b30,$1b58,$1b80
	dc.w $1ba8,$1bd0,$1bf8,$1c20
	dc.w $1c48,$1c70,$1c98,$1cc0
	dc.w $1ce8,$1d10,$1d38,$1d60
	dc.w $1d88,$1db0,$1dd8,$1e00
	dc.w $1e28,$1e50,$1e78,$1ea0
	dc.w $1ec8,$1ef0,$1f18,$1f40
	dc.w $1f68,$1f90,$1fb8,$1fe0
	dc.w $2008,$2030,$2058,$2080
	dc.w $20a8,$20d0,$20f8,$2120
	dc.w $2148,$2170,$2198,$21c0
	dc.w $21e8,$2210,$2238,$2260
	dc.w $2288,$22b0,$22d8,$2300
	dc.w $2328,$2350,$2378,$23a0
	dc.w $23c8,$23f0,$2418,$2440
	dc.w $2468,$2490,$24b8,$24e0
	dc.w $2508,$2530,$2558,$2580
	dc.w $25a8,$25d0,$25f8,$2620
	dc.w $2648,$2670,$2698,$26c0
	dc.w $26e8,$2710,$2738,$2760
	dc.w $2788,$27b0,$27d8
